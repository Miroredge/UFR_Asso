/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Errors;
import io.swagger.model.InlineResponse200;
import io.swagger.model.OrganisationReduced;
import io.swagger.model.RolesOfUserInOrganisationFound;
import io.swagger.model.SiretNumberRolesBody;
import io.swagger.model.UserCreated;
import io.swagger.model.UserFound;
import io.swagger.model.UserSubscriptionToOrganisationCreated;
import io.swagger.model.UsersBody;
import io.swagger.model.UsersPseudoBody;
import io.swagger.model.UsersPseudoBody1;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-12T07:32:15.929Z[GMT]")
@Validated
public interface UsersApi {

    @Operation(summary = "Create a 'User'", description = "This operation allows the creation of a new 'User' with the no role", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Ressource 'User' created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserCreated.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<UserCreated> createUser(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Parameter(in = ParameterIn.DEFAULT, description = "User detailled content", required=true, schema=@Schema()) @Valid @RequestBody UsersBody body);


    @Operation(summary = "Create a subscription to an `Organisation` for a `User`", description = "This operation allows to create for the `User`, identified by its unique identifier **pseudo**, a subscription to the `Organisation` provided in the request", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Link 'User'/'Organisation' created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserSubscriptionToOrganisationCreated.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/users/{pseudo}/organisations",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<UserSubscriptionToOrganisationCreated> createUserSubscriptionToOrganisation(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=5,max=50) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the User", required=true, schema=@Schema()) @PathVariable("pseudo") String pseudo, @Parameter(in = ParameterIn.DEFAULT, description = "Organisation detailled content", required=true, schema=@Schema()) @Valid @RequestBody OrganisationReduced body);


    @Operation(summary = "Delete a `User`", description = "This operation allows to delete a `User`, identified by its unique identifier **pseudo**", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/users/{pseudo}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Errors> deleteUser(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=5,max=50) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the User", required=true, schema=@Schema()) @PathVariable("pseudo") String pseudo);


    @Operation(summary = "Delete a subscription to an `Organisation` for a `User`", description = "This operation allows to delete for the `User`, identified by its unique identifier **pseudo**, a subscription to the `Organisation`, identified by its unique identifier **siretNumber**", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/users/{pseudo}/organisations/{siretNumber}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Errors> deleteUserSubscriptionToOrganisation(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=5,max=50) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the User", required=true, schema=@Schema()) @PathVariable("pseudo") String pseudo, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber);


    @Operation(summary = "Get the list of `Organisation` associated to a `User` - \"Page\" base pagination", description = "This operation allows to get the list of the `Organisation` associated to a `User`, identified by its unique identifier **pseudo**", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "User", "Organisation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of all the 'Organisations' of the 'User' found, \"Page\" based pagination", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/users/{pseudo}/organisations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> getListOfOrganisationsOfUser(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=5,max=50) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the User", required=true, schema=@Schema()) @PathVariable("pseudo") String pseudo, @Parameter(in = ParameterIn.QUERY, description = "Search for all `Users` having the given 'Roles' (case insensitive) in the 'Organisation'. If provided, the value of this parameter must be a comma-separated list of roles. Wildcard '\\*' **CANNOT** be used.  " ,schema=@Schema()) @Valid @RequestParam(value = "roles", required = false) String roles, @Parameter(in = ParameterIn.QUERY, description = "Retrieve only a subset of fields of the resource (case sensitive) If provided, the value of this parameter must be a comma-separated list of top-level response message fields. If not provided, all the representation is returned. " ,schema=@Schema()) @Valid @RequestParam(value = "fields", required = false) String fields, @Parameter(in = ParameterIn.QUERY, description = "Retrieve in the response the related embedded resource representations. If provided, the value of this parameter must be a comma-separated list of relation identifiers. If not provided, only the ressource is returned. " ,schema=@Schema()) @Valid @RequestParam(value = "embed", required = false) String embed, @Min(1)@Parameter(in = ParameterIn.QUERY, description = "Indicates the page number to be returned. `pageSize` may be used with `page` to set the number of items per page. " ,schema=@Schema(allowableValues={  }, minimum="1"
, defaultValue="1")) @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page, @Min(1) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "Indicates the size of each page (number of items per page). Can only be used together with `page`. " ,schema=@Schema(allowableValues={  }, minimum="1", maximum="50"
, defaultValue="10")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize);


    @Operation(summary = "Get the list of `Roles` of a `User` in a given `Organisation`", description = "This operation allows to the list of `Roles` of a `User`, identified by its unique identifier **pseudo**, in an `Organisation`, identified by its unique identifier **siretNumber**", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "User", "Role" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of 'Roles' associated to a 'User' in an 'Organisation' found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RolesOfUserInOrganisationFound.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/users/{pseudo}/organisations/{siretNumber}/roles",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RolesOfUserInOrganisationFound> getRolesOfUserInOrganisation(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=5,max=50) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the User", required=true, schema=@Schema()) @PathVariable("pseudo") String pseudo, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber);


    @Operation(summary = "Get a single 'User'", description = "This operation allows to get a 'User', according to its unique identifier (pseudo)", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ressource 'User' found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserFound.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/users/{pseudo}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserFound> getUserByPseudo(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=5,max=50) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the User", required=true, schema=@Schema()) @PathVariable("pseudo") String pseudo);


    @Operation(summary = "Overwrite the data about a 'User'", description = "This operation allows to overwrite the details of a 'User', according to its unique identifier (pseudo)", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ressource 'User' found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserFound.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/users/{pseudo}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<UserFound> overwriteUserByPseudo(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=5,max=50) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the User", required=true, schema=@Schema()) @PathVariable("pseudo") String pseudo, @Parameter(in = ParameterIn.DEFAULT, description = "User detailled content", required=true, schema=@Schema()) @Valid @RequestBody UsersPseudoBody body);


    @Operation(summary = "Update a limited set of data about a 'User'", description = "This operation allows to update some fields of a 'User', according to its unique identifier (pseudo)", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ressource 'User' found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserFound.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/users/{pseudo}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<UserFound> updatePartialUserByPseudo(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=5,max=50) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the User", required=true, schema=@Schema()) @PathVariable("pseudo") String pseudo, @Parameter(in = ParameterIn.DEFAULT, description = "User detailled content", required=true, schema=@Schema()) @Valid @RequestBody UsersPseudoBody1 body);


    @Operation(summary = "Update the list of `Roles` of a `User` in a given `Organisation`", description = "This operation allows to update the list of `Roles` of a `User`, identified by its unique identifier **pseudo**, in an `Organisation`, identified by its unique identifier **siretNumber**", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "User", "Role" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of 'Roles' associated to a 'User' in an 'Organisation' updated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RolesOfUserInOrganisationFound.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/users/{pseudo}/organisations/{siretNumber}/roles",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<RolesOfUserInOrganisationFound> updateRolesOfUserInOrganisation(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=5,max=50) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the User", required=true, schema=@Schema()) @PathVariable("pseudo") String pseudo, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber, @Parameter(in = ParameterIn.DEFAULT, description = "List of roles", required=true, schema=@Schema()) @Valid @RequestBody SiretNumberRolesBody body);

}

