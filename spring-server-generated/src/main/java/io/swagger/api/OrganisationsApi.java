/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.BookEntry;
import io.swagger.model.BookEntryCreated;
import io.swagger.model.Errors;
import io.swagger.model.Event;
import io.swagger.model.EventCreated;
import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse2001;
import io.swagger.model.InlineResponse2002;
import io.swagger.model.InlineResponse2003;
import io.swagger.model.InlineResponse2004;
import io.swagger.model.InlineResponse2005;
import io.swagger.model.Newsletter;
import io.swagger.model.NewsletterCreated;
import io.swagger.model.OpeningHour;
import io.swagger.model.OpeningHourCreated;
import io.swagger.model.OrganisationCreated;
import io.swagger.model.OrganisationFound;
import io.swagger.model.OrganisationsBody;
import io.swagger.model.OrganisationsSiretNumberBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-12T07:32:15.929Z[GMT]")
@Validated
public interface OrganisationsApi {

    @Operation(summary = "Add a 'BookEntry' to an 'Organisation', identified by its unique identifier **siretNumber**", description = "This operation allows the creation of a new 'BookEntry'", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "BookEntry" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Ressource 'BookEntry' created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BookEntryCreated.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations/{siretNumber}/book-entries",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<BookEntryCreated> createBookEntry(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber, @Parameter(in = ParameterIn.DEFAULT, description = "'BookEntry' detailled content", required=true, schema=@Schema()) @Valid @RequestBody BookEntry body);


    @Operation(summary = "Add an 'Event' to an 'Organisation', identified by its unique identifier **siretNumber**", description = "This operation allows the creation of a new 'Event'", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "Event" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Ressource 'Event' created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = EventCreated.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations/{siretNumber}/events",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<EventCreated> createEvent(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the 'Organisation'", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber, @Parameter(in = ParameterIn.DEFAULT, description = "Event detailled content", required=true, schema=@Schema()) @Valid @RequestBody Event body);


    @Operation(summary = "Add a 'Newsletter' to an 'Organisation', identified by its unique identifier **siretNumber**", description = "This operation allows the creation of a new 'Newsletter'", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "Newsletter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Ressource 'Newsletter' created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = NewsletterCreated.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations/{siretNumber}/newsletters",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<NewsletterCreated> createNewsletter(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber, @Parameter(in = ParameterIn.DEFAULT, description = "'Newsletter' detailled content", required=true, schema=@Schema()) @Valid @RequestBody Newsletter body);


    @Operation(summary = "Declare an 'OpeningHour' time slot in an 'Organisation', identified by its unique identifier **siretNumber**", description = "This operation allows the creation of a new 'OpeningHour' time slot", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "Opening hour" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Ressource 'OpeningHour' created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OpeningHourCreated.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations/{siretNumber}/opening-hours",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<OpeningHourCreated> createOpeningHour(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber, @Parameter(in = ParameterIn.DEFAULT, description = "'OpeningHour' detailled content", required=true, schema=@Schema()) @Valid @RequestBody OpeningHour body);


    @Operation(summary = "Create an 'Organisation' (aka Student Union)", description = "This operation allows a 'User' to the create of a new 'Organanisation' The 'User' becomes the 'ADMIN' of the 'Organisation'", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "Organisation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Ressource 'Organisation' created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrganisationCreated.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<OrganisationCreated> createOrganisation(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Parameter(in = ParameterIn.DEFAULT, description = "Organisation detailled content", required=true, schema=@Schema()) @Valid @RequestBody OrganisationsBody body);


    @Operation(summary = "Delete an `Organisation`", description = "This operation allows to delete an `Organisation`, identified by its unique identifier **siretNumber**", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "Organisation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations/{siretNumber}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Errors> deleteOrganisation(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber);


    @Operation(summary = "Get the list of all the `BookEntry` in an `Organisation` - \"Page\" base pagination", description = "This operation allows to get the list of `BookEntry` associated to an `Organisation`, identified by its unique identifier **siretNumber**", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "BookEntry" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of 'BookEntry' in 'Organisation' found, \"Page\" based pagination", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2004.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations/{siretNumber}/book-entries",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2004> getListOfBookEntriesOfOrganisation(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber, @Min(1)@Parameter(in = ParameterIn.QUERY, description = "Indicates the page number to be returned. `pageSize` may be used with `page` to set the number of items per page. " ,schema=@Schema(allowableValues={  }, minimum="1"
, defaultValue="1")) @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page, @Min(1) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "Indicates the size of each page (number of items per page). Can only be used together with `page`. " ,schema=@Schema(allowableValues={  }, minimum="1", maximum="50"
, defaultValue="10")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize);


    @Operation(summary = "Get the list of all the `Event` in an `Organisation` - \"Page\" base pagination", description = "This operation allows to get the list of `Event` associated to an `Organisation`, identified by its unique identifier **siretNumber**", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "Event" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of 'Event' in 'Organisation' found, \"Page\" based pagination", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2005.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations/{siretNumber}/events",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2005> getListOfEventsOfOrganisation(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber, @Min(1)@Parameter(in = ParameterIn.QUERY, description = "Indicates the page number to be returned. `pageSize` may be used with `page` to set the number of items per page. " ,schema=@Schema(allowableValues={  }, minimum="1"
, defaultValue="1")) @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page, @Min(1) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "Indicates the size of each page (number of items per page). Can only be used together with `page`. " ,schema=@Schema(allowableValues={  }, minimum="1", maximum="50"
, defaultValue="10")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize);


    @Operation(summary = "Get the list of all the `Newsletter` in an `Organisation` - \"Page\" base pagination", description = "This operation allows to get the list of `Newsletter` associated to an `Organisation`, identified by its unique identifier **siretNumber**", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "Newsletter" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of 'Newsletter' in 'Organisation' found, \"Page\" based pagination", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2003.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations/{siretNumber}/newsletters",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2003> getListOfNewslettersOfOrganisation(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber, @Min(1)@Parameter(in = ParameterIn.QUERY, description = "Indicates the page number to be returned. `pageSize` may be used with `page` to set the number of items per page. " ,schema=@Schema(allowableValues={  }, minimum="1"
, defaultValue="1")) @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page, @Min(1) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "Indicates the size of each page (number of items per page). Can only be used together with `page`. " ,schema=@Schema(allowableValues={  }, minimum="1", maximum="50"
, defaultValue="10")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize);


    @Operation(summary = "Get the list of all the `OpeningHour` in an `Organisation` - \"Page\" base pagination", description = "This operation allows to get the list of `OpeningHour` associated to an `Organisation`, identified by its unique identifier **siretNumber**", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "Opening hour" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of 'OpeningHours' in 'Organisation' found, \"Page\" based pagination", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2002.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations/{siretNumber}/opening-hours",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2002> getListOfOpeningHourOfOrganisation(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber, @Min(1)@Parameter(in = ParameterIn.QUERY, description = "Indicates the page number to be returned. `pageSize` may be used with `page` to set the number of items per page. " ,schema=@Schema(allowableValues={  }, minimum="1"
, defaultValue="1")) @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page, @Min(1) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "Indicates the size of each page (number of items per page). Can only be used together with `page`. " ,schema=@Schema(allowableValues={  }, minimum="1", maximum="50"
, defaultValue="10")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize);


    @Operation(summary = "Get the list of all the 'Organisations' - \"Page\" base pagination", description = "This operation allows to get the list of 'Organisations' using a \"Page\" base pagination", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "Organisation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of 'Organisation' found, \"Page\" based pagination", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> getListOfOrganisationsFoundPageBasedPagination(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Parameter(in = ParameterIn.QUERY, description = "Search for all `Organisation` matching the given value (case insensitive). Wildcard '\\*' can be used.  " ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name, @Parameter(in = ParameterIn.QUERY, description = "Retrieve only a subset of fields of the resource (case sensitive). If provided, the value of this parameter must be a comma-separated list of top-level response message fields. If not provided, all the representation is returned. " ,schema=@Schema()) @Valid @RequestParam(value = "fields", required = false) String fields, @Min(1)@Parameter(in = ParameterIn.QUERY, description = "Indicates the page number to be returned. `pageSize` may be used with `page` to set the number of items per page. " ,schema=@Schema(allowableValues={  }, minimum="1"
, defaultValue="1")) @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page, @Min(1) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "Indicates the size of each page (number of items per page). Can only be used together with `page`. " ,schema=@Schema(allowableValues={  }, minimum="1", maximum="50"
, defaultValue="10")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize);


    @Operation(summary = "Get the list of all the `Users` in an `Organisation` - \"Page\" base pagination", description = "This operation allows to get the list of `User` associated to an `Organisation`, identified by its unique identifier **siretNumber**", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "Organisation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of 'Users' in 'Organisation' found, \"Page\" based pagination", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2001.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations/{siretNumber}/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2001> getListOfUsersInOrganisation(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber, @Parameter(in = ParameterIn.QUERY, description = "Search for all `Users` having the given 'Roles' (case insensitive) in the 'Organisation'. If provided, the value of this parameter must be a comma-separated list of roles. Wildcard '\\*' **CANNOT** be used.  " ,schema=@Schema()) @Valid @RequestParam(value = "roles", required = false) String roles, @Parameter(in = ParameterIn.QUERY, description = "Retrieve only a subset of fields of the resource (case sensitive) If provided, the value of this parameter must be a comma-separated list of top-level response message fields. If not provided, all the representation is returned. " ,schema=@Schema()) @Valid @RequestParam(value = "fields", required = false) String fields, @Parameter(in = ParameterIn.QUERY, description = "Retrieve in the response the related embedded resource representations. If provided, the value of this parameter must be a comma-separated list of relation identifiers. If not provided, only the ressource is returned. " ,schema=@Schema()) @Valid @RequestParam(value = "embed", required = false) String embed, @Min(1)@Parameter(in = ParameterIn.QUERY, description = "Indicates the page number to be returned. `pageSize` may be used with `page` to set the number of items per page. " ,schema=@Schema(allowableValues={  }, minimum="1"
, defaultValue="1")) @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page, @Min(1) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "Indicates the size of each page (number of items per page). Can only be used together with `page`. " ,schema=@Schema(allowableValues={  }, minimum="1", maximum="50"
, defaultValue="10")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize);


    @Operation(summary = "Get a single 'Organisation'", description = "This operation allows to get an 'Organisation'", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "Organisation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ressource 'Organisation' found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrganisationFound.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations/{siretNumber}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<OrganisationFound> getOrganisationBySiret(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber);


    @Operation(summary = "Overwrite a single 'Organisation'", description = "This operation allows to overwrite an 'Organisation'", security = {
        @SecurityRequirement(name = "OauthSecurity", scopes = {
            "All",
"Application_Admin",
"Organisation_Admin",
"Organisation_Member",
"Organisation_Candidate",
"Organisation_Refused",
"Organisation_President",
"Organisation_VicePresident",
"Organisation_Secretary",
"Organisation_Treasurer"        })    }, tags={ "Organisation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ressource 'Organisation' found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrganisationFound.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "422", description = "Unprocessable Entity", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "501", description = "Not Implemented", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "502", description = "Bad Gateway", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "503", description = "Service Unavailable", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))),
        
        @ApiResponse(responseCode = "200", description = "Unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Errors.class))) })
    @RequestMapping(value = "/organisations/{siretNumber}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<OrganisationFound> overwriteOrganisationBySiret(@Parameter(in = ParameterIn.HEADER, description = "Network location of the URI" ,required=true,schema=@Schema()) @RequestHeader(value="Host", required=true) String host, @Size(min=14,max=14) @Parameter(in = ParameterIn.PATH, description = "Unique ID of the Organisation", required=true, schema=@Schema()) @PathVariable("siretNumber") String siretNumber, @Parameter(in = ParameterIn.DEFAULT, description = "Organisation detailled content", required=true, schema=@Schema()) @Valid @RequestBody OrganisationsSiretNumberBody body);

}

